<?php
//use Drupal\Core\Form\FormStateInterface;
//use Drupal\field\Entity\FieldConfig;
//use Drupal\field\Entity\FieldStorageConfig;
//
//
/////**
//// * Implements hook_field_widget_form_alter().
//// */
////function file_resup_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
////  $field_name = $context['items']->getName();
////  kint($field_name);exit;
////}
////
/////**
//// * @file
//// * Written by Henri MEDOT <henri.medot[AT]absyx[DOT]fr>
//// * http://www.absyx.fr
//// */
////
////use Drupal\Core\Field\FieldDefinitionInterface;
////use Drupal\Core\Field\WidgetInterface;
////use Drupal\Core\Form\FormStateInterface;
////
////require_once dirname(__FILE__) . '/file_resup.field.inc';
////
////define('FILE_RESUP_DEFAULT_CHUNKSIZE', 2 * 1024 * 1024);
////define('FILE_RESUP_TEMPORARY', 'file_resup_temporary');
////
//////
//////function file_resup_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
//////  $field_name = $context['items']->getName();
//////  kint("field name");
//////  kint($field_name);
//////  // Add a suffix to widget form elements for all fields of type entity_reference.
////////  $field_definition = $context['items']->getFieldDefinition();
////////  if ($field_definition->getType() == 'entity_reference') {
////////    // TODO: Render the node link to $link
////////    $element['#suffix'] = $link;
////////  }
//////}
////
//////function file_resup_form_alter(array $form, FormStateInterface $formStateInterface, $form_id) {
////////  kint($form_id);
//////  if($form_id == 'field_config_edit_form') {
//////    kint($form['settings']['default_image']);
//////
//////
//////    $settings = $form['settings']['resup_settings'];
//////    $additions = [];
//////    $form['settings']['resup_settings'] = array(
//////      '#type' => 'details',
//////      '#title' => t('Resumable upload settings'),
////////      '#collapsible' => TRUE,
////////      '#collapsed' => !$settings['resup'],
//////      '#parents' => array('instance', 'settings'),
//////      '#weight' => 20,
//////    );
//////
//////    $additions['resup_settings']['resup'] = array(
//////      '#type' => 'checkbox',
//////      '#title' => t('Enable resumable upload'),
////////      '#default_value' => $settings['resup'],
//////    );
//////
//////    $additions['resup_settings']['resup_max_filesize'] = array(
//////      '#type' => 'textfield',
//////      '#title' => t('Maximum upload size'),
////////      '#default_value' => $settings['resup_max_filesize'],
//////      '#description' => t("You may enter a value greater than the default maximum upload size above. It can exceed PHP's maximum post and file upload sizes as well."),
//////      '#size' => 10,
//////      '#element_validate' => array('_file_generic_settings_max_filesize'),
//////    );
//////
//////    $additions['resup_settings']['resup_autostart'] = array(
//////      '#type' => 'checkbox',
//////      '#title' => t('Start upload on files added'),
////////      '#default_value' => $settings['resup_autostart'],
//////      '#description' => t('When checked, upload will start as soon as files are added without requiring to click <em>Upload</em>, unless some of the added files did not pass validation.'),
//////    );
//////
////////    $form['settings'][] = $additions;
//////
//////
//////  }
//////}
/////**
//// * Returns data as plain text.
//// */
////function file_resup_plain_output($text = '') {
////  drupal_page_is_cacheable(FALSE);
////  drupal_add_http_header('Content-Type', 'text/plain');
////  echo $text;
////}
////
/////**
//// * Save a completed upload.
//// */
////function file_resup_save_upload($element, $resup_file_id) {
////  $user = \Drupal::currentUser();
////
////  // Get a valid upload ID.
////  $upload_id = file_resup_upload_id($resup_file_id);
////  if (!$upload_id) {
////    return FALSE;
////  }
////
////  // Get the upload record.
////  $upload = file_resup_upload_load($upload_id);
////  if (!$upload) {
////    return FALSE;
////  }
////
////  // The file may have already been uploaded before.
////  if ($upload->fid) {
////    return file_load($upload->fid);
////  }
////
////  // Ensure the upload is complete.
////  if ($upload->uploaded_chunks != ceil($upload->filesize / file_resup_chunksize())) {
////    return FALSE;
////  }
////
////  // Ensure the destination is still valid.
////  $destination = $element['#upload_location'];
////  $destination_scheme = \Drupal::service("file_system")->uriScheme($destination);
////  if (!$destination_scheme || $destination_scheme != $upload->scheme) {
////    return FALSE;
////  }
////
////  // Ensure the uploaded file is present.
////  $upload_uri = file_resup_upload_uri($upload);
////  if (!file_exists($upload_uri)) {
////    return FALSE;
////  }
////
////  // Begin building the file object.
////  $file = new stdClass();
////  $file->uid = $user->uid;
////  $file->status = 0;
////  $file->filename = trim(\Drupal::service("file_system")->basename($upload->filename), '.');
////  $file->uri = $upload_uri;
////  $file->filemime = file_get_mimetype($file->filename);
////  $file->filesize = $upload->filesize;
////
////  // Support Transliteration.
////  // @FIXME
////// // @FIXME
////// // This looks like another module's variable. You'll need to rewrite this call
////// // to ensure that it uses the correct configuration object.
////// if (module_exists('transliteration') && variable_get('transliteration_file_uploads', TRUE)) {
//////     $orig_filename = $file->filename;
//////     $file->filename = transliteration_clean_filename($file->filename);
//////   }
////
////
////  // Munge the filename.
////  $validators = $element['#file_resup_upload_validators'];
////  $extensions = '';
////  if (isset($validators['file_validate_extensions'])) {
////    if (isset($validators['file_validate_extensions'][0])) {
////      $extensions = $validators['file_validate_extensions'][0];
////    }
////    else {
////      unset($validators['file_validate_extensions']);
////    }
////  }
////  else {
////    $extensions = 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp';
////    $validators['file_validate_extensions'][] = $extensions;
////  }
////  if (!empty($extensions)) {
////    $file->filename = file_munge_filename($file->filename, $extensions);
////  }
////
////  // Rename potentially executable files.
////  // @FIXME
////// // @FIXME
////// // This looks like another module's variable. You'll need to rewrite this call
////// // to ensure that it uses the correct configuration object.
////// if (!variable_get('allow_insecure_uploads', 0) && preg_match('/\.(php|pl|py|cgi|asp|js)(\.|$)/i', $file->filename) && (substr($file->filename, -4) != '.txt')) {
//////     $file->filemime = 'text/plain';
//////     $file->uri .= '.txt';
//////     $file->filename .= '.txt';
//////     if (!empty($extensions)) {
//////       $validators['file_validate_extensions'][0] .= ' txt';
//////       drupal_set_message(t('For security reasons, your upload has been renamed to %filename.', array('%filename' => $file->filename)));
//////     }
//////   }
////
////
////  // Get the upload element name.
////  $element_parents = $element['#parents'];
////  if (end($element_parents) == 'resup') {
////    unset($element_parents[key($element_parents)]);
////  }
////  $form_field_name = implode('_', $element_parents);
////
////  // Run validators.
////  $validators['file_validate_name_length'] = array();
////  $errors = file_validate($file, $validators);
////  if ($errors) {
////    $message = t('The specified file %name could not be uploaded.', array('%name' => $file->filename));
////    if (count($errors) > 1) {
////      // @FIXME
////// theme() has been renamed to _theme() and should NEVER be called directly.
////// Calling _theme() directly can alter the expected output and potentially
////// introduce security issues (see https://www.drupal.org/node/2195739). You
////// should use renderable arrays instead.
//////
//////
////// @see https://www.drupal.org/node/2195739
////// $message .= theme('item_list', array('items' => $errors));
////
////    }
////    else {
////      $message .= ' ' . array_pop($errors);
////    }
////    form_set_error($form_field_name, $message);
////    return FALSE;
////  }
////
////  // Prepare the destination directory.
////  if (!file_prepare_directory($destination, FILE_CREATE_DIRECTORY)) {
////    \Drupal::logger('file_resup')->notice('The upload directory %directory for the file field !name could not be created or is not accessible. A newly uploaded file could not be saved in this directory as a consequence, and the upload was canceled.', array('%directory' => $destination, '!name' => $element['#field_name']));
////    form_set_error($form_field_name, t('The file could not be uploaded.'));
////    return FALSE;
////  }
////
////  // Complete the destination.
////  if (substr($destination, -1) != '/') {
////    $destination .= '/';
////  }
////  $destination = file_destination($destination . $file->filename, FILE_EXISTS_RENAME);
////
////  // Move the uploaded file.
////  $file->uri = $destination;
////  if (!rename($upload_uri, $file->uri)) {
////    form_set_error($form_field_name, t('File upload error. Could not move uploaded file.'));
////    \Drupal::logger('file_resup')->notice('Upload error. Could not move uploaded file %file to destination %destination.', array('%file' => $file->filename, '%destination' => $file->uri));
////    return FALSE;
////  }
////
////  // Set the permissions on the new file.
////  \Drupal::service("file_system")->chmod($file->uri);
////
////  // Transliteration support: restore the original filename if configured so.
////  // @FIXME
////// // @FIXME
////// // This looks like another module's variable. You'll need to rewrite this call
////// // to ensure that it uses the correct configuration object.
////// if (isset($orig_filename) && !variable_get('transliteration_file_uploads_display_name', TRUE)) {
//////     $file->filename = $orig_filename;
//////   }
////
////
////  // Save the file object to the database.
////  $file->file_resup_filesize = $upload->filesize;
////  $file = file_save($file);
////  if (!$file) {
////    return FALSE;
////  }
////
////  // Update the upload record.
////  $upload->fid = $file->fid;
////  \Drupal::database()->merge('file_resup')->fields($upload)->key(['upload_id'])->execute();
////
////  return $file;
////}
////
/////**
//// * Implements hook_file_presave().
//// */
////function file_resup_file_presave($file) {
////  // On 32bit platforms, filesize() may return unexpected results for files
////  // larger than 2 GB and make drupal_write_record() crash.
////  if (isset($file->file_resup_filesize)) {
////    $file->filesize = $file->file_resup_filesize;
////  }
////  elseif (isset($file->original) && $file->original->filesize > PHP_INT_MAX) {
////    // @todo We should not rely on $file->original because file might have been
////    // replaced, but could not figure out a better solution so far...
////    $file->filesize = $file->original->filesize;
////  }
////}
////
/////**
//// * Implements hook_file_insert().
//// */
////function file_resup_file_insert($file) {
////  // drupal_write_record() cannot write a file size greater than 2 GB on 32bit
////  // platforms.
////  if ($file->filesize > PHP_INT_MAX) {
////    db_query('UPDATE {file_managed} SET filesize = :filesize WHERE fid = :fid', array(':filesize' => $file->filesize, ':fid' => $file->fid));
////  }
////}
////
/////**
//// * Implements hook_file_update().
//// */
////function file_resup_file_update($file) {
////  file_resup_file_insert($file);
////}
////
/////**
//// * Load an upload record.
//// */
////function file_resup_upload_load($upload_id) {
////  $upload = db_query('SELECT * FROM {file_resup} WHERE upload_id = :upload_id', array(':upload_id' => $upload_id))->fetchObject();
////
////  // If the upload has a fid, ensure it is still valid.
////  if (!empty($upload->fid)) {
////    $file = file_load($upload->fid);
////    // @FIXME
////// // @FIXME
////// // This looks like another module's variable. You'll need to rewrite this call
////// // to ensure that it uses the correct configuration object.
////// if (!$file || !in_array(file_uri_scheme($file->uri), variable_get('file_public_schema', array('public'))) && !file_download_access($file->uri)) {
//////       file_resup_upload_delete_record($upload);
//////       return;
//////     }
////
////  }
////
////  return $upload;
////}
////
/////**
//// * Delete an upload record.
//// */
////function file_resup_upload_delete_record($upload) {
////  db_query('DELETE FROM {file_resup} WHERE upload_id = :upload_id', array(':upload_id' => $upload->upload_id));
////}
////
/////**
//// * Delete an upload file.
//// */
////function file_resup_upload_delete_file($upload) {
////  $uri = file_resup_upload_uri($upload);
////  if (file_exists($uri)) {
////    file_unmanaged_delete($uri);
////  }
////}
////
/////**
//// * Returns an upload uri.
//// */
////function file_resup_upload_uri($upload) {
////  return $upload->scheme . '://' . FILE_RESUP_TEMPORARY . '/' . $upload->upload_id;
////}
////
/////**
//// * Get a valid upload ID from a resup file ID.
//// */
////function file_resup_upload_id($resup_file_id) {
////  $user = \Drupal::currentUser();
////
////  if (preg_match('`^[1-9]\d*-\d+-[\w%]+$`', $resup_file_id)) {
////    $prefix = $user->uid ? $user->uid : str_replace('.', '_', $user->hostname);
////    return substr($prefix . '-' . $resup_file_id, 0, 240);
////  }
////  return FALSE;
////}
////
/////**
//// * Implements hook_cron().
//// */
////function file_resup_cron() {
////  // Delete old uploads.
////  $result = db_query('SELECT * FROM {file_resup} WHERE timestamp < :timestamp', array(':timestamp' => REQUEST_TIME - DRUPAL_MAXIMUM_TEMP_FILE_AGE));
////  foreach ($result as $upload) {
////    file_resup_upload_delete_record($upload);
////    file_resup_upload_delete_file($upload);
////  }
////}
////
///**
// * Returns the configured size of a file chunk.
// */
//function file_resup_chunksize() {
//  // @FIXME
//// Could not extract the default value because it is either indeterminate, or
//// not scalar. You'll need to provide a default value in
//// config/install/file_resup.settings.yml and config/schema/file_resup.schema.yml.
//  return \Drupal::config('file_resup.settings')->get('file_resup_chunksize');
//}
////
////
////function file_resup_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, $form, FormStateInterface $form_state) {
////  $element = array();
////  // Add a 'my_setting' checkbox to the settings form for 'foo_widget' field
////  // widgets.
//////  print $plugin->getPluginId();
//////  kint($plugin->getPluginId());
//////  if ($plugin->getPluginId() == 'foo_widget') {
//////    $element['my_setting'] = array(
//////      '#type' => 'checkbox',
//////      '#title' => t('My setting'),
//////      '#default_value' => $plugin->getThirdPartySetting('my_module', 'my_setting'),
//////    );
//////  }
////
////
////  $element['resup_settings'] = array(
////    '#type' => 'details',
////    '#open' => TRUE,
////    '#title' => t('Resumable upload settings'),
//////    '#parents' => array('instance', 'settings'),
//////    '#weight' => 20,
////  );
////
////  $element['resup_settings']['resup'] = array(
////    '#type' => 'checkbox',
////    '#title' => t('Enable resumable upload'),
//////    '#default_value' => $settings['resup'],
////  );
////
////  $element['resup_settings']['resup_max_filesize'] = array(
////    '#type' => 'textfield',
////    '#title' => t('Maximum upload size'),
//////    '#default_value' => $settings['resup_max_filesize'],
////    '#description' => t("You may enter a value greater than the default maximum upload size above. It can exceed PHP's maximum post and file upload sizes as well."),
////    '#size' => 10,
////    '#element_validate' => array('_file_generic_settings_max_filesize'),
////  );
////
////  $element['resup_settings']['resup_autostart'] = array(
////    '#type' => 'checkbox',
////    '#title' => t('Start upload on files added'),
//////    '#default_value' => $settings['resup_autostart'],
////    '#description' => t('When checked, upload will start as soon as files are added without requiring to click <em>Upload</em>, unless some of the added files did not pass validation.'),
////  );
////
////
////
////  return $element;
////}
////
/////**
//// * Implements hook_field_info_alter().
//// */
////function file_resup_field_info_alter(&$info) {
////  foreach (array('file', 'image') as $type) {
////    if (isset($info[$type])) {
//////      $info[$type]['instance_settings'] += array(
//////        'resup' => 0,
//////        'resup_max_filesize' => '',
//////        'resup_autostart' => 0,
//////      );
////    }
////  }
////}
////
//function file_resup_form_field_config_edit_form_alter(&$form, &$form_state, $form_id) {
//
//
//  $default_values = $form['settings']['resup_settings'];
//
//  $field = $form_state->getFormObject()->getEntity();
////  kint($field);
////  kint($field->getSetting('resup_settings'));
////  kint($field->getThirdPartySetting('file_resup', 'resup_settings'));
////  kint($field);
////  kint($form_id);
//  $form['settings']['resup_settings'] = array(
//    '#type' => 'details',
//    '#title' => t('Resumable upload settings'),
//    '#open' => TRUE,
////      '#collapsed' => !$settings['resup'],
////      '#parents' => array('instance', 'settings'),
////      '#weight' => 20,
//  );
//
//  $form['settings']['resup_settings']['resup'] = array(
//    '#type' => 'checkbox',
//    '#title' => t('Enable resumable upload'),
//    '#default_value' => $field->getThirdPartySetting('file_resup', 'resup_settings')['resup'],
//  );
//
//  $form['settings']['resup_settings']['resup_max_filesize'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Maximum upload size'),
////      '#default_value' => $settings['resup_max_filesize'],
//    '#default_value' => $field->getThirdPartySetting('file_resup', 'resup_settings')['resup_max_filesize'],
//    '#description' => t("You may enter a value greater than the default maximum upload size above. It can exceed PHP's maximum post and file upload sizes as well."),
//    '#size' => 10,
//    '#element_validate' => array('_file_generic_settings_max_filesize'),
//  );
//
//  $form['settings']['resup_settings']['resup_autostart'] = array(
//    '#type' => 'checkbox',
//    '#title' => t('Start upload on files added'),
////      '#default_value' => $settings['resup_autostart'],
//    '#default_value' => $field->getThirdPartySetting('file_resup', 'resup_settings')['resup_autostart'],
//    '#description' => t('When checked, upload will start as soon as files are added without requiring to click <em>Upload</em>, unless some of the added files did not pass validation.'),
//  );
//
//
//
//
////  $form['resup_settings']['resup_autostart'] = array(
////    '#type' => 'checkbox',
////    '#title' => t('Start upload on files added'),
//////      '#default_value' => $settings['resup_autostart'],
////    '#description' => t('When checked, upload will start as soon as files are added without requiring to click <em>Upload</em>, unless some of the added files did not pass validation.'),
////  );
//
//
////kint($form);
////  kint($form['settings']);
////  $form['actions']['submit']['#submit'][] = 'fileResupSubmit';
//
//  $form['#entity_builders'][] = 'file_resup_form_field_config_edit_form_builder';
//}
//
///**
// * My module form builder to map values to third party settings.
// */
//function file_resup_form_field_config_edit_form_builder($entity_type, FieldConfig $field, &$form, FormStateInterface $form_state) {
////  $field->setThirdPartySetting('file_resup', 'help_page_id', $form_state->getValue('resup_settings'));
////  kint($field);
////  kint($form_state->getValue('settings')['resup_settings']);exit;
////  $field->setSetting('resup_settings', $form_state->getValue('settings')['resup_settings'])->save();
//  $field->setThirdPartySetting('file_resup', 'resup_settings',  $form_state->getValue('settings')['resup_settings']);
//}
//
//
//
//
////function fileResupSubmit(array &$form, FormStateInterface $form_state) {
////  parent::submitForm($form, $form_state);
////
////  // Handle the default value.
////  $default_value = [];
////  if (isset($form['default_value'])) {
////    $items = $form['#entity']->get($this->entity->getName());
////    $default_value = $items->defaultValuesFormSubmit($form['default_value'], $form, $form_state);
////  }
////  $this->entity->setDefaultValue($default_value);
////}
/////**
//// * Implements hook_form_FORM_ID_alter() for field_ui_field_edit_form().
//// */
////function file_resup_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
////  if (file_resup_field_widget_support($form['#instance']['widget']['type'])) {
////    $settings = $form['#instance']['settings'];
////
////    $additions['resup_settings'] = array(
////      '#type' => 'fieldset',
////      '#title' => t('Resumable upload settings'),
////      '#collapsible' => TRUE,
////      '#collapsed' => !$settings['resup'],
////      '#parents' => array('instance', 'settings'),
////      '#weight' => 20,
////    );
////
////    $additions['resup_settings']['resup'] = array(
////      '#type' => 'checkbox',
////      '#title' => t('Enable resumable upload'),
////      '#default_value' => $settings['resup'],
////    );
////
////    $additions['resup_settings']['resup_max_filesize'] = array(
////      '#type' => 'textfield',
////      '#title' => t('Maximum upload size'),
////      '#default_value' => $settings['resup_max_filesize'],
////      '#description' => t("You may enter a value greater than the default maximum upload size above. It can exceed PHP's maximum post and file upload sizes as well."),
////      '#size' => 10,
////      '#element_validate' => array('_file_generic_settings_max_filesize'),
////    );
////
////    $additions['resup_settings']['resup_autostart'] = array(
////      '#type' => 'checkbox',
////      '#title' => t('Start upload on files added'),
////      '#default_value' => $settings['resup_autostart'],
////      '#description' => t('When checked, upload will start as soon as files are added without requiring to click <em>Upload</em>, unless some of the added files did not pass validation.'),
////    );
////
////    $form['instance']['settings'] += $additions;
////  }
////}
////
/////**
//// * Implements hook_field_widget_form_alter().
//// */
//function file_resup_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
//  $field_name = $context['items']->getName();
////  kint("field name");
////  kint($field_name);
//  if($field_name == 'field_movie') {
////    kint($element);
////    kint('context');
////    kint($context);
//    $keys = \Drupal\Core\Render\Element::children($element);
////    kint($keys);
//    $delta = end($keys);
//    $delta = 0;
//    // $delta = count($keys) - 1;
////    kint($delta);
//    $cardinality = $context['field']['cardinality'];
////    $element[$delta]['#file_resup_max_files'] = $cardinality != FIELD_CARDINALITY_UNLIMITED ? $cardinality - $delta : -1;
////
//    $upload_validators = $element[$delta]['#upload_validators'];
////    $upload_validators['file_validate_size'] = array(file_resup_max_filesize($instance));
//    $element[$delta]['#file_resup_upload_validators'] = $upload_validators;
////
//    $element[$delta]['#process'][] = 'file_resup_field_widget_process';
////    $element[$delta]['#file_value_callbacks'][] = 'file_resup_field_widget_value';
//  }
////  print "field definition";
//
//  // Add a css class to widget form elements for all fields of type mytype.
//  $field_definition = $context['items']->getFieldDefinition();
////  kint("field definition");
////  if ($field_definition->getType() == 'mytype') {
////    // Be sure not to overwrite existing attributes.
////    $element['#attributes']['class'][] = 'myclass';
////  }
////  $instance = $context['instance'];
////  if (!empty($instance['settings']['resup']) && file_resup_field_widget_support($instance['widget']['type']) && \Drupal::currentUser()->hasPermission('upload via file_resup') && file_upload_max_size() >= file_resup_chunksize()) {
////    $keys = \Drupal\Core\Render\Element::children($element);
////    $delta = end($keys);
////
////    $cardinality = $context['field']['cardinality'];
////    $element[$delta]['#file_resup_max_files'] = $cardinality != FIELD_CARDINALITY_UNLIMITED ? $cardinality - $delta : -1;
////
////    $upload_validators = $element[$delta]['#upload_validators'];
////    $upload_validators['file_validate_size'] = array(file_resup_max_filesize($instance));
////    $element[$delta]['#file_resup_upload_validators'] = $upload_validators;
////
////    $element[$delta]['#process'][] = 'file_resup_field_widget_process';
////    $element[$delta]['#file_value_callbacks'][] = 'file_resup_field_widget_value';
////  }
//}
////
/////**
//// * #process callback for the field widget element.
//// */
//function file_resup_field_widget_process($element, &$form_state, $form) {
////  $path = drupal_get_path('module', 'file_resup');
//  $max_files = $element['#file_resup_max_files'];
//
//  $entity_type = 'node';
//  $type = 'managed_file';
//  $field_name = 'field_movie';
//  $bundle = 'custom_blog';
////  kint($element);
////  kint($form_state);
//  // Get the upload validators and build a new description.
////  $field = field_widget_field($element, $form_state);
////  $instance = field_widget_instance($element, $form_state);
//
//  $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
//  $instance = FieldStorageConfig::loadByName($entity_type, $field_name);
//
//
////  $description = $field['cardinality'] == 1 ? field_filter_xss($instance['description']) : '';
//  $upload_validators = $element['#file_resup_upload_validators'];
//  // @FIXME
//// theme() has been renamed to _theme() and should NEVER be called directly.
//// Calling _theme() directly can alter the expected output and potentially
//// introduce security issues (see https://www.drupal.org/node/2195739). You
//// should use renderable arrays instead.
////
////
//// @see https://www.drupal.org/node/2195739
//// $description = theme('file_upload_help', array('description' => $description, 'upload_validators' => $upload_validators));
////  $description = [
////    '#theme' => 'file_upload_help',
////    '#description' => $description,
////    '#upload_validators' => $upload_validators
////  ];
//
//
//  // Add the resup element.
//  // @FIXME
//// url() expects a route name or an external URI.
// $element['resup'] = array(
//     '#type' => 'hidden',
//     '#value_callback' => 'file_resup_value',
//     '#field_name' => $element['#field_name'],
//     '#field_parents' => $element['#field_parents'],
//     '#upload_location' => $element['#upload_location'],
//     '#file_resup_upload_validators' => $upload_validators,
//     '#attributes' => array(
//       'class' => array('file-resup'),
//       'data-upload-name' => $element['upload']['#name'],
//       'data-upload-button-name' => $element['upload_button']['#name'],
//       'data-max-filesize' => $upload_validators['file_validate_size'][0],
////       'data-description' => $description,
////       'data-url' => url('file_resup/upload/' . implode('/', $element['#array_parents']) . '/' . $form['form_build_id']['#value']),
////       'data-drop-message' => $max_files > -1 ? format_plural($max_files, 'Drop a file here or click <em>Browse</em> below.', 'Drop up to @count files here or click <em>Browse</em> below.') : t('Drop files here or click <em>Browse</em> below.'),
//     ),
//     '#prefix' => '<div class="file-resup-wrapper">',
//     '#suffix' => '</div>',
////     '#attached' => array(
////       'css' => array($path . '/file_resup.css'),
////       'js' => array(
////         $path . '/js/resup.min.js',
////         $path . '/file_resup.js',
////         array(
////           'type' => 'setting',
////           'data' => array('file_resup' => array('chunk_size' => file_resup_chunksize())),
////         ),
////       ),
////     ),
//
//   '#attached' => array(
//     'library' => array('file_resup/file_resup'),
//   ),
//   );
//
//
//  // Add the extension list as a data attribute.
//  if (isset($upload_validators['file_validate_extensions'][0])) {
//    $extension_list = implode(',', array_filter(explode(' ', $upload_validators['file_validate_extensions'][0])));
//    $element['resup']['#attributes']['data-extensions'] = $extension_list;
//  }
//
//  // Add the maximum number of files as a data attribute.
//  if ($max_files > -1) {
//    $element['resup']['#attributes']['data-max-files'] = $max_files;
//  }
//
////  // Add autostart as a data attribute.
////  if ($instance['settings']['resup_autostart']) {
////    $element['resup']['#attributes']['data-autostart'] = 'on';
////  }
//
////  $element['upload_button']['#submit'][] = 'file_resup_field_widget_submit';
////  $element['#pre_render'][] = 'file_resup_field_widget_pre_render';
//
//  return $element;
//}
////
/////**
//// * #file_value_callbacks callback for the field widget element.
//// */
////function file_resup_field_widget_value(&$element, &$input, $form_state) {
////  if (!empty($input['resup'])) {
////    $resup_file_ids = explode(',', $input['resup']);
////    $resup_file_id = reset($resup_file_ids);
////    if ($file = file_resup_save_upload($element, $resup_file_id)) {
////      $input['fid'] = $file->fid;
////      // When anonymous, file_managed_file_value() does not allow previously
////      // uploaded temporary files to be reused, so we also need to pass fid
////      // through element's default value.
////      if ($file->status != FILE_STATUS_PERMANENT && !\Drupal::currentUser()->uid) {
////        if ($element['#extended']) {
////          $element['#default_value']['fid'] = $file->fid;
////          // 'display' must be passed as well, as an integer.
////          $element['#default_value']['display'] = $input['display'];
////        }
////        else {
////          $element['#default_value'] = $file->fid;
////        }
////      }
////    }
////  }
////}
////
/////**
//// * #value_callback callback for the resup element.
//// */
////function file_resup_value($element, $input = FALSE, $form_state = array()) {
////  $fids = array();
////
////  if ($input) {
////    $resup_file_ids = explode(',', $input);
////    array_shift($resup_file_ids);
////    if (isset($element['#attributes']['data-max-files'])) {
////      $resup_file_ids = array_slice($resup_file_ids, 0, max(0, $element['#attributes']['data-max-files'] - 1));
////    }
////    foreach ($resup_file_ids as $resup_file_id) {
////      if ($file = file_resup_save_upload($element, $resup_file_id)) {
////        $fids[] = $file->fid;
////      }
////    }
////  }
////
////  return implode(',', $fids);
////}
////
/////**
//// * #submit callback for the upload button of the field widget element.
//// */
////function file_resup_field_widget_submit($form, &$form_state) {
////  $button = $form_state['triggering_element'];
////  $element = \Drupal\Component\Utility\NestedArray::getValue($form, array_slice($button['#array_parents'], 0, -1));
////  $field_name = $element['#field_name'];
////  $langcode = $element['#language'];
////  $parents = $element['#field_parents'];
////  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
////  $items = $field_state['items'];
////
////  // Remove possible duplicate items.
////  $fids = array();
////  foreach ($items as $delta => $item) {
////    if (in_array($item['fid'], $fids)) {
////      unset($items[$delta]);
////    }
////    else {
////      $fids[] = $item['fid'];
////    }
////  }
////  $items = array_values($items);
////
////  // Append our items.
////  if (!empty($element['resup']['#value'])) {
////    $fids = array_diff(explode(',', $element['resup']['#value']), $fids);
////    $field = field_widget_field($element, $form_state);
////    foreach ($fids as $fid) {
////      $item = array('fid' => $fid);
////      // Respect display default when available.
////      if (!empty($field['settings']['display_field'])) {
////        $item['display'] = $field['settings']['display_default'];
////      }
////      $items[] = $item;
////    }
////  }
////
////  \Drupal\Component\Utility\NestedArray::setValue($form_state['values'], array_slice($button['#array_parents'], 0, -2), $items);
////  $field_state['items'] = $items;
////  field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);
////}
////
/////**
//// * #pre_render callback for the field widget element.
//// */
////function file_resup_field_widget_pre_render($element) {
////  if (!empty($element['#value']['fid'])) {
////    $element['resup']['#access'] = FALSE;
////  }
////  return $element;
////}
////
/////**
//// * Check whether our module has support for a widget type.
//// */
////function file_resup_field_widget_support($widget_type) {
////  $supported_types = &drupal_static(__FUNCTION__);
////
////  if (!isset($supported_types)) {
////    $supported_types = \Drupal::moduleHandler()->invokeAll('file_resup_supported_field_widget_types');
////    $supported_types = array_combine($supported_types, $supported_types);
////    \Drupal::moduleHandler()->alter('file_resup_supported_field_widget_types', $supported_types);
////  }
////
////  return !empty($supported_types[$widget_type]);
////}
////
/////**
//// * Implements hook_file_resup_supported_field_widget_types().
//// */
////function file_resup_file_resup_supported_field_widget_types() {
////  return array('file_generic', 'image_image');
////}
////
/////**
//// * Get the file size limit for a field instance.
//// */
////function file_resup_max_filesize($instance) {
////  $max_filesize = file_upload_max_size();
////
////  if (!empty($instance['settings']['max_filesize'])) {
////    $size = parse_size($instance['settings']['max_filesize']);
////    if ($size < $max_filesize) {
////      $max_filesize = $size;
////    }
////  }
////
////  if (!empty($instance['settings']['resup_max_filesize'])) {
////    $size = parse_size($instance['settings']['resup_max_filesize']);
////    if ($size > $max_filesize) {
////      $max_filesize = $size;
////    }
////  }
////
////  return $max_filesize;
////}
